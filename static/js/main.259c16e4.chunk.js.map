{"version":3,"sources":["components/Navbar.tsx","App.tsx","pages/HomePage.tsx","api.ts","components/Loader/Loader.tsx","utils/constants.ts","components/PersonLink.tsx","components/PersonItem.tsx","utils/searchHelper.ts","components/PeopleTable.tsx","components/PeopleFilters.tsx","utils/getPreparedPeople.ts","pages/PeoplePage.tsx","utils/getParentsFuncts.ts","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","HomePage","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","columnNames","SEX_FILTER","All","Male","Female","CENTURIES","PersonLink","person","useSearchParams","searchParams","pathname","slug","search","toString","sex","name","PersonItem","personSlug","useParams","born","died","mother","motherName","father","fatherName","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","PeopleTable","people","sort","get","order","getSortedLink","newSortField","newSort","map","toLowerCase","PeopleFilters","setSearchParams","query","centuries","getAll","handeleCenturiesChange","centry","newCenturies","includes","filter","num","type","placeholder","onChange","event","target","length","getPreparedPeople","sortField","copyPeople","normalizedQuery","filterByName","preparedCentries","Number","year","Math","ceil","person1","person2","localeCompare","reverse","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","peopleFromServer","find","getParents","catch","finally","filteredPeople","isNoPeople","isNoVissiblePeople","isErrorMessage","isDisplayPeople","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.259c16e4.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n};\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getLinkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={getLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const DEFAULT_VALUE = '-';\nexport const columnNames = ['Name', 'Sex', 'Born', 'Died'];\n\nexport const SEX_FILTER = {\n  All: null,\n  Male: 'm',\n  Female: 'f',\n};\n\nexport const CENTURIES = ['16', '17', '18', '19', '20'];\n","import classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SEX_FILTER } from '../utils/constants';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        pathname: `../${person.slug}`,\n        search: searchParams.toString(),\n      }}\n      className={classNames({\n        'has-text-danger': person.sex === SEX_FILTER.Female,\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\n\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { DEFAULT_VALUE } from '../utils/constants';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonItem: React.FC<Props> = ({ person }) => {\n  const { personSlug } = useParams();\n  const {\n    sex,\n    slug,\n    born,\n    died,\n    mother,\n    motherName,\n    father,\n    fatherName,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': slug === personSlug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother\n          ? <PersonLink person={mother} />\n          : motherName || DEFAULT_VALUE}\n      </td>\n      <td>\n        {father\n          ? <PersonLink person={father} />\n          : fatherName || DEFAULT_VALUE}\n      </td>\n    </tr>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../types';\nimport { columnNames } from '../utils/constants';\nimport { PersonItem } from './PersonItem';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [search] = useSearchParams();\n  const sort = search.get('sort');\n  const order = search.get('order');\n\n  const getSortedLink = (newSortField: string) => {\n    const newSort: SearchParams = {\n      sort: newSortField,\n      order: null,\n    };\n\n    if (sort === newSortField && order) {\n      newSort.sort = null;\n    }\n\n    if (sort === newSortField && !order) {\n      newSort.order = 'desc';\n    }\n\n    return getSearchWith(search, newSort);\n  };\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        <table\n          data-cy=\"peopleTable\"\n          className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n        >\n          <thead>\n            <tr>\n              {columnNames.map(name => (\n                <th key={name}>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    {name}\n                    <Link to={{\n                      search: getSortedLink(name.toLowerCase()),\n                    }}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames('fas', {\n                          'fa-sort': sort !== name.toLowerCase(),\n                          'fa-sort-up': sort === name.toLowerCase() && !order,\n                          'fa-sort-down': sort === name.toLowerCase() && order,\n                        })}\n                        />\n                      </span>\n                    </Link>\n                  </span>\n                </th>\n              ))}\n              <th>Mother</th>\n              <th>Father</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {people.map(person => (\n              <PersonItem person={person} />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { getSearchWith } from '../utils/searchHelper';\nimport { CENTURIES, SEX_FILTER } from '../utils/constants';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || null;\n  const centuries = searchParams.getAll('centuries') || [];\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchParams(\n      getSearchWith(searchParams, { query: event.target.value || null }),\n    );\n  }\n\n  function handeleCenturiesChange(centry: string) {\n    const newCenturies = centuries.includes(centry)\n      ? centuries.filter(num => num !== centry)\n      : [...centuries, centry];\n\n    return getSearchWith(searchParams, { centuries: newCenturies });\n  }\n\n  const clearCentries = () => {\n    return getSearchWith(searchParams, { centuries: null });\n  };\n\n  const resetALLFilters = () => {\n    return getSearchWith(searchParams, {\n      centuries: null,\n      query: null,\n      sex: null,\n    });\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(SEX_FILTER).map(([key, value]) => {\n          return (\n            <Link\n              key={key}\n              className={classNames({\n                'is-active': value === sex,\n              })}\n              to={{\n                search: getSearchWith(searchParams, {\n                  sex: value,\n                }),\n              }}\n            >\n              {key}\n            </Link>\n          );\n        })}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n\n            {CENTURIES.map(centry => {\n              return (\n                <Link\n                  key={centry}\n                  data-cy=\"century\"\n                  className={classNames(\n                    'button',\n                    'mr-1',\n                    { 'is-info': centuries.includes(centry) },\n                  )}\n                  to={{ search: handeleCenturiesChange(centry) }}\n                >\n                  {centry}\n                </Link>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <Link\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                { 'is-outlined': !!centuries.length },\n              )}\n              to={{ search: clearCentries() }}\n            >\n              All\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{ search: resetALLFilters() }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from '../types';\n\nfunction filterByName(person: Person, query: string) {\n  const normalizedQuery = query.toLowerCase();\n\n  return person.name.toLowerCase().includes(normalizedQuery)\n    || person.fatherName?.toLowerCase().includes(normalizedQuery)\n    || person.motherName?.toLowerCase().includes(normalizedQuery);\n}\n\nfunction calculationCentry(year: number) {\n  return Math.ceil(year / 100);\n}\n\nexport function getPreparedPeople(\n  people: Person[],\n  query: string,\n  sex: string | null,\n  centuries: string[],\n  sortField: string | null,\n  order: string | null,\n) {\n  let copyPeople = [...people];\n\n  if (query) {\n    copyPeople = copyPeople.filter(person => filterByName(person, query));\n  }\n\n  if (sex) {\n    copyPeople = copyPeople.filter(person => {\n      return person.sex === sex;\n    });\n  }\n\n  if (centuries.length) {\n    const preparedCentries = centuries.map(Number);\n\n    copyPeople = copyPeople\n      .filter(({ born }) => preparedCentries.includes(calculationCentry(born)));\n  }\n\n  if (sortField) {\n    copyPeople = copyPeople.sort((person1, person2) => {\n      switch (sortField) {\n        case 'name':\n        case 'sex':\n          return person1[sortField].localeCompare(person2[sortField]);\n        case 'born':\n        case 'died':\n          return person1[sortField] - person2[sortField];\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order) {\n    copyPeople.reverse();\n  }\n\n  return copyPeople;\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { Loader } from '../components/Loader';\nimport { getParents } from '../utils/getParentsFuncts';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const [search] = useSearchParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then((peopleFromServer) => (\n        setPeople(getParents(peopleFromServer))\n      ))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const query = search.get('query') || '';\n  const sex = search.get('sex') || null;\n  const centuries = search.getAll('centuries') || [];\n  const sort = search.get('sort');\n  const order = search.get('order');\n\n  const filteredPeople = getPreparedPeople(\n    people,\n    query,\n    sex,\n    centuries,\n    sort,\n    order,\n  );\n\n  const isNoPeople = !people.length && !isLoading && !isError;\n  const isNoVissiblePeople = !filteredPeople.length && !isLoading && !isError;\n  const isErrorMessage = isError && !isLoading;\n  const isDisplayPeople = !!people.length && !isError;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!!people.length && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isErrorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isNoPeople && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isDisplayPeople && (\n                <PeopleTable people={filteredPeople} />\n              )}\n\n              {isNoVissiblePeople && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport const getParents = (people: Person[]) => {\n  return people.map(person => {\n    const father = people.find(({ name }) => person.fatherName === name);\n    const mother = people.find(({ name }) => person.motherName === name);\n\n    return ({\n      ...person,\n      father,\n      mother,\n    });\n  });\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n\n        <Route path=\"people\">\n          <Route path=\":personSlug?\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}